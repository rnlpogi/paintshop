/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paintsystem;

import java.awt.print.PrinterException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author ADMIN
 */
public class ADMINSOLDREPORT extends javax.swing.JFrame {
   Connection conn = null;
    PreparedStatement pst = null;
    ResultSet rs;
    public ADMINSOLDREPORT() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        soldtable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        total = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        monthchooser = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        soldtable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        soldtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DATE", "TYPE", "BRAND NAME", "PRODUCT NAME", "PRICE", "QUANTITY", "TOTAL COST"
            }
        ));
        jScrollPane1.setViewportView(soldtable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 520, 280));

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel1.setText("SALES REPORT");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("MONTH:");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 94, 60, 20));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/PRINT.png"))); // NOI18N
        jButton1.setText("PRINT");
        jButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 190, 80, 30));

        total.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                totalKeyTyped(evt);
            }
        });
        jPanel2.add(total, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 130, 100, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("TOTAL SALES:");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, -1, -1));

        monthchooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECT MONTH", "JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER" }));
        monthchooser.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                monthchooserPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jPanel2.add(monthchooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 90, 100, 30));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 130, 310, 280));

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-go-back-16.png"))); // NOI18N
        jButton2.setText("BACK");
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, 100, 30));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/a56e20150b4ee9e901847dd5723280b5-removebg-preview.png"))); // NOI18N
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 20, -1, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/a56e20150b4ee9e901847dd5723280b5-removebg-preview.png"))); // NOI18N
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 968, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 510, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void totalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalKeyTyped
        char vchar = evt.getKeyChar();
        if(!(Character.isDigit(vchar))){
            evt.consume();
        }
    }//GEN-LAST:event_totalKeyTyped

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ADMINMENU s= new  ADMINMENU();
        s.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void monthchooserPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_monthchooserPopupMenuWillBecomeInvisible
        if (monthchooser.getSelectedItem().equals("JANUARY")) {
            january();
        }else if (monthchooser.getSelectedItem().equals("FEBRUARY")) {
            february();
        }else if(monthchooser.getSelectedItem().equals("MARCH")){
            march();
        }
        else if(monthchooser.getSelectedItem().equals("APRIL")){
            april();
        }else if(monthchooser.getSelectedItem().equals("MAY")){
            may();
        }else if(monthchooser.getSelectedItem().equals("JUNE")){
            june();
        }else if(monthchooser.getSelectedItem().equals("JULY")){
            july();
        }else if(monthchooser.getSelectedItem().equals("AUGUST")){
            august();
        }else if(monthchooser.getSelectedItem().equals("SEPTEMBER")){
            september();
        }else if(monthchooser.getSelectedItem().equals("OCTOBER")){
            october();
        }else if(monthchooser.getSelectedItem().equals("NOVEMBER")){
            november();
        }else if(monthchooser.getSelectedItem().equals("DECEMBER")){
            December();
        }
        else{
         retrievesales();
        }
    }//GEN-LAST:event_monthchooserPopupMenuWillBecomeInvisible

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
   conn =  DBConnection.getConnection();   
    retrievesales();
    }//GEN-LAST:event_formWindowOpened
public void  print() 
{
    String cash = total.getText();
    
         try {
             new Printsalesreport(cash,soldtable.getModel()).setVisible(true);
         } catch (PrinterException ex) {
             Logger.getLogger(ADMINSOLDREPORT.class.getName()).log(Level.SEVERE, null, ex);
         }
    
}
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    print();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ADMINSOLDREPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ADMINSOLDREPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ADMINSOLDREPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ADMINSOLDREPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ADMINSOLDREPORT().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox monthchooser;
    private javax.swing.JTable soldtable;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables

     private void january(){
       try {
                String sql = "SELECT Date AS 'DATE', Type AS 'TYPE', Brandname AS 'BRAND NAME',Productname AS 'PRODUCT NAME', Price AS 'PRICE', Quantity AS 'QUANTITY', Totalcost AS 'TOTAL COST'FROM salesreport WHERE MONTH(Date) = 1";   
                  pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                soldtable.setModel(DbUtils.resultSetToTableModel(rs));
                
                 int sum = 0;
        for (int i=0; i<soldtable.getRowCount(); i++)
        {
            sum = sum + Integer.parseInt(soldtable.getValueAt(i,6).toString());
        }
        total.setText(Integer.toString(sum));
               
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
   }
   private void february(){
       try {
               
               String sql = "SELECT Date AS 'DATE', Type AS 'TYPE', Brandname AS 'BRAND NAME',Productname AS 'PRODUCT NAME', Price AS 'PRICE', Quantity AS 'QUANTITY', Totalcost AS 'TOTAL COST'FROM salesreport WHERE MONTH(Date) = 2";   
                  pst = conn.prepareStatement(sql);    rs = pst.executeQuery();
                soldtable.setModel(DbUtils.resultSetToTableModel(rs));
                       int sum = 0;
        for (int i=0; i<soldtable.getRowCount(); i++)
        {
            sum = sum + Integer.parseInt(soldtable.getValueAt(i,6).toString());
        }
        total.setText(Integer.toString(sum));
               
               
                
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
   }
    private void march(){
       try {
              
               String sql = "SELECT Date AS 'DATE', Type AS 'TYPE', Brandname AS 'BRAND NAME',Productname AS 'PRODUCT NAME', Price AS 'PRICE', Quantity AS 'QUANTITY', Totalcost AS 'TOTAL COST'FROM salesreport WHERE MONTH(Date) = 3";   
                  pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                soldtable.setModel(DbUtils.resultSetToTableModel(rs));
                
                         int sum = 0;
        for (int i=0; i<soldtable.getRowCount(); i++)
        {
            sum = sum + Integer.parseInt(soldtable.getValueAt(i,6).toString());
        }
        total.setText(Integer.toString(sum));
              
                
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
   }
     private void april(){
       try {
             
               String sql = "SELECT Date AS 'DATE', Type AS 'TYPE', Brandname AS 'BRAND NAME',Productname AS 'PRODUCT NAME', Price AS 'PRICE', Quantity AS 'QUANTITY', Totalcost AS 'TOTAL COST'FROM salesreport WHERE MONTH(Date) = 4";   
                  pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                soldtable.setModel(DbUtils.resultSetToTableModel(rs));
                          int sum = 0;
        for (int i=0; i<soldtable.getRowCount(); i++)
        {
            sum = sum + Integer.parseInt(soldtable.getValueAt(i,6).toString());
        }
        total.setText(Integer.toString(sum));
             
               
                
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
   }
      private void may(){
       try {
               String sql = "SELECT Date AS 'DATE', Type AS 'TYPE', Brandname AS 'BRAND NAME',Productname AS 'PRODUCT NAME', Price AS 'PRICE', Quantity AS 'QUANTITY', Totalcost AS 'TOTAL COST'FROM salesreport WHERE MONTH(Date) = 5";   
                  pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                soldtable.setModel(DbUtils.resultSetToTableModel(rs));
                        int sum = 0;
        for (int i=0; i<soldtable.getRowCount(); i++)
        {
            sum = sum + Integer.parseInt(soldtable.getValueAt(i,6).toString());
        }
        total.setText(Integer.toString(sum));
               
                
                
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
   }
       private void june(){
       try {
                 String sql = "SELECT Date AS 'DATE', Type AS 'TYPE', Brandname AS 'BRAND NAME',Productname AS 'PRODUCT NAME', Price AS 'PRICE', Quantity AS 'QUANTITY', Totalcost AS 'TOTAL COST'FROM salesreport WHERE MONTH(Date) = 6";   
                  pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                soldtable.setModel(DbUtils.resultSetToTableModel(rs));
                         int sum = 0;
        for (int i=0; i<soldtable.getRowCount(); i++)
        {
            sum = sum + Integer.parseInt(soldtable.getValueAt(i,6).toString());
        }
        total.setText(Integer.toString(sum));
              
               
                
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
   }
        private void july(){
       try {
                  String sql = "SELECT Date AS 'DATE', Type AS 'TYPE', Brandname AS 'BRAND NAME',Productname AS 'PRODUCT NAME', Price AS 'PRICE', Quantity AS 'QUANTITY', Totalcost AS 'TOTAL COST'FROM salesreport WHERE MONTH(Date) = 7";   
                  pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                soldtable.setModel(DbUtils.resultSetToTableModel(rs));
                         int sum = 0;
        for (int i=0; i<soldtable.getRowCount(); i++)
        {
            sum = sum + Integer.parseInt(soldtable.getValueAt(i,6).toString());
        }
        total.setText(Integer.toString(sum));
              
                
                
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
   }
         private void august(){
       try {
                String sql = "SELECT Date AS 'DATE', Type AS 'TYPE', Brandname AS 'BRAND NAME',Productname AS 'PRODUCT NAME', Price AS 'PRICE', Quantity AS 'QUANTITY', Totalcost AS 'TOTAL COST'FROM salesreport WHERE MONTH(Date) = 8";   
                  pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                soldtable.setModel(DbUtils.resultSetToTableModel(rs));
                          int sum = 0;
        for (int i=0; i<soldtable.getRowCount(); i++)
        {
            sum = sum + Integer.parseInt(soldtable.getValueAt(i,6).toString());
        }
        total.setText(Integer.toString(sum));
             
                
                
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
   }
          private void september(){
       try {
               String sql = "SELECT Date AS 'DATE', Type AS 'TYPE', Brandname AS 'BRAND NAME',Productname AS 'PRODUCT NAME', Price AS 'PRICE', Quantity AS 'QUANTITY', Totalcost AS 'TOTAL COST'FROM salesreport WHERE MONTH(Date) = 9";   
                  pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                soldtable.setModel(DbUtils.resultSetToTableModel(rs));
                        int sum = 0;
        for (int i=0; i<soldtable.getRowCount(); i++)
        {
            sum = sum + Integer.parseInt(soldtable.getValueAt(i,6).toString());
        }
        total.setText(Integer.toString(sum));
               
               
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
   }
           private void october(){
       try {
                 String sql = "SELECT Date AS 'DATE', Type AS 'TYPE', Brandname AS 'BRAND NAME',Productname AS 'PRODUCT NAME', Price AS 'PRICE', Quantity AS 'QUANTITY', Totalcost AS 'TOTAL COST'FROM salesreport WHERE MONTH(Date) = 10";   
                  pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                soldtable.setModel(DbUtils.resultSetToTableModel(rs));
                         int sum = 0;
        for (int i=0; i<soldtable.getRowCount(); i++)
        {
            sum = sum + Integer.parseInt(soldtable.getValueAt(i,6).toString());
        }
        total.setText(Integer.toString(sum));
              
               
                
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
   }
            private void november(){
       try {
                String sql = "SELECT Date AS 'DATE', Type AS 'TYPE', Brandname AS 'BRAND NAME',Productname AS 'PRODUCT NAME', Price AS 'PRICE', Quantity AS 'QUANTITY', Totalcost AS 'TOTAL COST'FROM salesreport WHERE MONTH(Date) = 11";   
                  pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                soldtable.setModel(DbUtils.resultSetToTableModel(rs));
                         int sum = 0;
        for (int i=0; i<soldtable.getRowCount(); i++)
        {
            sum = sum + Integer.parseInt(soldtable.getValueAt(i,6).toString());
        }
        total.setText(Integer.toString(sum));
              
                
                
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
   }
             private void December(){
       try {
                 String sql = "SELECT Date AS 'DATE', Type AS 'TYPE', Brandname AS 'BRAND NAME',Productname AS 'PRODUCT NAME', Price AS 'PRICE', Quantity AS 'QUANTITY', Totalcost AS 'TOTAL COST'FROM salesreport WHERE MONTH(Date) = 12";   
                  pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                soldtable.setModel(DbUtils.resultSetToTableModel(rs));
                
                         int sum = 0;
        for (int i=0; i<soldtable.getRowCount(); i++)
        {
            sum = sum + Integer.parseInt(soldtable.getValueAt(i,6).toString());
        }
        total.setText(Integer.toString(sum));
            
                
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
   }
             private void retrievesales(){
try {
     String sql = "SELECT Date AS 'DATE', Type AS 'TYPE', Brandname AS 'BRAND NAME',Productname AS 'PRODUCT NAME', Price AS 'PRICE', Quantity AS 'QUANTITY', Totalcost AS 'TOTAL COST'FROM salesreport";   
                  pst = conn.prepareStatement(sql);
rs =pst.executeQuery();
soldtable.setModel(DbUtils.resultSetToTableModel(rs));
           int sum = 0;
        for (int i=0; i<soldtable.getRowCount(); i++)
        {
            sum = sum + Integer.parseInt(soldtable.getValueAt(i,6).toString());
        }
        total.setText(Integer.toString(sum));
            
}catch(Exception e){
   JOptionPane.showMessageDialog(rootPane, e);
}
}
}
